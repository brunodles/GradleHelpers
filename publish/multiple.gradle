apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

group publishingRoot.group
version publishingRoot.version

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

def pomConfig = {
    licenses {
        license {
            name publishingRoot.license.name
            url publishingRoot.license.url
            distribution "repo"
        }
    }
    developers {
        developer {
            name publishingRoot.developer.name
            email publishingRoot.developer.email
        }
    }
}

// Maven Central
def scmVcs = {
    scm {
        connection "scm:git:git://${publishingRoot.gitPath}.git"
        developerConnection "scm:git:ssh://${publishingRoot.gitPath}.git"
        url "http://${publishingRoot.gitPath}"
    }
}
publishing {
    publications {
        mainPublication(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId publishingRoot.group
            artifactId publishingModule.artifact
            version publishingRoot.version
            pom.withXml {
                def root = asNode()
                root.appendNode('description', publishingRoot.desc)
                root.appendNode('name', publishingModule.name)
                root.appendNode('url', publishingRoot.site)
                root.children().last() + pomConfig
                root.children().last() + scmVcs
            }
        }
    }
}

def property(String projectName, String systemName, def defaultValue) {
    // Load the properties from `~/.gradle/gradle.properties`
    if (project.hasProperty(projectName))
        return project.property(projectName)
    else if (System.getenv().containsKey(systemName))
        return System.getenv(systemName)
    else
        return defaultValue
}

static def or(def ... values) {
    for (def value : values)
        if (value != null) return value
}

bintray {
    user = property("bintray.user", "BINTRAY_USER", null)
    key = property("bintray.apikey", "BINTRAY_APIKEY", null)
    def bintrayRepo = property("bintray.repo", "BINTRAY_REPO", publishingRoot.repo)
    logger.info("Bintray user $user")
    logger.info("Bintray repo $bintrayRepo")
    if (user == null || key == null) {
        logger.info('Bintray user/apikey not found')
    }
    publications = ['mainPublication']
    configurations = ['archives']
    publish = true
    override = or(publishingRoot.override, false)
    pkg {
        repo = bintrayRepo
        name = publishingModule.artifact
        userOrg = or(publishingRoot.userOrg, null)
        desc = or(publishingModule.desc, publishingModule.desc, null)
        websiteUrl = publishingRoot.site
        issueTrackerUrl = or(publishingRoot.issueTrackerUrl, "${publishingRoot.site}/issues")
        vcsUrl = "http://" + or(publishingRoot.git, "${publishingRoot.site}.git")
        licenses = [or(publishingRoot.license.short, "mit")]
        publicDownloadNumbers = true
        version {
            name = publishingRoot.version
            released = new Date()
            vcsTag = publishingRoot.tag
        }
    }
}

project.tasks.getByName('bintrayUpload').dependsOn('assemble', 'generatePomFileForMainPublicationPublication')
